import { downloadDir } from '@tauri-apps/api/path';
import { writeText } from '@tauri-apps/plugin-clipboard-manager';
import { message, save } from '@tauri-apps/plugin-dialog';
import { writeTextFile } from '@tauri-apps/plugin-fs';
import { generatePrivateKey, getPublicKey, nip19 } from 'nostr-tools';
import { useEffect, useMemo, useState } from 'react';
import { useNavigate } from 'react-router-dom';

import { useStorage } from '@libs/storage/provider';

import { CopyIcon } from '@shared/icons';

import { useOnboarding } from '@stores/onboarding';
import { useStronghold } from '@stores/stronghold';

export function CreateStep1Screen() {
  const { db } = useStorage();

  const navigate = useNavigate();
  const setPrivkey = useStronghold((state) => state.setPrivkey);
  const setTempPrivkey = useOnboarding((state) => state.setTempPrivkey);
  const setPubkey = useOnboarding((state) => state.setPubkey);
  const setStep = useOnboarding((state) => state.setStep);

  const [loading, setLoading] = useState(false);
  const [copied, setCopied] = useState(false);
  const [downloaded, setDownloaded] = useState(false);

  const privkey = useMemo(() => generatePrivateKey(), []);
  const pubkey = getPublicKey(privkey);
  const npub = nip19.npubEncode(pubkey);
  const nsec = nip19.nsecEncode(privkey);

  const download = async () => {
    try {
      const downloadPath = await downloadDir();
      const fileName = `nostr_keys_${new Date().toISOString()}.txt`;
      const filePath = await save({
        defaultPath: downloadPath + '/' + fileName,
      });

      if (filePath) {
        await writeTextFile(
          filePath,
          `Generated by Lume (lume.nu)\nPublic key: ${npub}\nPrivate key: ${nsec}`
        );

        setDownloaded(true);
      } // else { user cancel action }
    } catch (e) {
      await message(e, { title: 'Cannot download account keys', type: 'error' });
    }
  };

  const copyPrivkey = async () => {
    try {
      await writeText(nsec);
      setCopied(true);

      setTimeout(() => setCopied(false), 3000);
    } catch (e) {
      await message(e, { title: 'Cannot copy private key', type: 'error' });
    }
  };

  const submit = async () => {
    setLoading(true);

    // update state
    setPrivkey(privkey);
    setTempPrivkey(privkey); // only use if user close app and reopen it
    setPubkey(pubkey);

    // save to database
    await db.createAccount(npub, pubkey);

    // redirect to next step
    navigate('/auth/create/step-2', { replace: true });
  };

  useEffect(() => {
    // save current step, if user close app and reopen it
    setStep('/auth/create');
  }, []);

  return (
    <div className="mx-auto w-full max-w-md">
      <div className="mb-4 border-b border-white/10 pb-4">
        <h1 className="mb-2 text-center text-2xl font-semibold text-white">
          This is your new Nostr account
        </h1>
        <p className="mb-2 text-white/70">
          Your private key is your password. If you lose this key, you will lose access to
          your account! Copy it and keep it in a safe place. There is no way to reset your
          private key.
        </p>
        <p className="text-white/70">
          Public key is used for sharing with other people so that they can find you using
          the public key.
        </p>
      </div>
      <div className="flex flex-col gap-8">
        <div className="flex flex-col gap-3">
          <div className="flex flex-col gap-1">
            <span className="font-medium text-white">Private Key</span>
            <div className="relative">
              <input
                readOnly
                value={nsec.substring(0, 5) + '**************************************'}
                className="relative h-12 w-full rounded-lg border-t border-white/10 bg-white/20 py-1 pl-3.5 pr-11 text-white !outline-none backdrop-blur-xl placeholder:text-white/70"
              />
              <button
                type="button"
                onClick={() => copyPrivkey()}
                className="group absolute right-2 top-1/2 inline-flex h-7 -translate-y-1/2 transform items-center gap-1.5 rounded-md bg-white/20 px-2.5 text-sm hover:bg-white/30"
              >
                <CopyIcon className="h-4 w-4 text-white/70 group-hover:text-white" />
                {copied ? 'Copied' : 'Copy'}
              </button>
            </div>
          </div>
          <div className="flex flex-col gap-1">
            <span className="font-medium text-white">Public Key</span>
            <input
              readOnly
              value={npub}
              className="relative h-12 w-full rounded-lg border-t border-white/10 bg-white/20 px-3.5 py-1 text-white !outline-none backdrop-blur-xl placeholder:text-white/70"
            />
          </div>
        </div>
        <div className="flex flex-col gap-2">
          <button
            type="button"
            onClick={() => download()}
            className="inline-flex h-12 w-full items-center justify-center rounded-lg bg-interor-500 px-6 font-medium leading-none text-white hover:bg-interor-600 focus:outline-none"
          >
            {downloaded ? 'Downloaded' : 'Download account keys'}
          </button>
          <button
            type="button"
            onClick={() => submit()}
            className="inline-flex h-12 w-full items-center justify-center rounded-lg border-t border-white/10 bg-white/20 px-6 font-medium leading-none text-white hover:bg-white/30 focus:outline-none"
          >
            {loading ? 'Creating...' : 'Continue'}
          </button>
          <span className="text-center text-sm text-white/50">
            By clicking &apos;Continue&apos;, you are ensuring that your keys are saved in
            a safe place. You cannot recover these keys if they are lost.
          </span>
        </div>
      </div>
    </div>
  );
}
